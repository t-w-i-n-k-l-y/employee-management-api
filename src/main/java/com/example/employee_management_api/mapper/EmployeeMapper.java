package com.example.employee_management_api.mapper;

import com.example.employee_management_api.dto.EmployeeDTO;
import com.example.employee_management_api.model.Employee;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.time.Instant;


/**
 * Mapper class to convert between Employee entity and EmployeeDTO.
 */
public class EmployeeMapper {

    private static final Logger logger = LoggerFactory.getLogger(EmployeeMapper.class);

    /**
     * Converts EmployeeDTO to Employee entity.
     */
    public static Employee toEntity(EmployeeDTO employeeDTO, Employee existingEmployee) {
        if (employeeDTO == null) {
            logger.error("Failed to convert: EmployeeDTO is null");
            throw new IllegalArgumentException("EmployeeDTO cannot be null.");
        }

        String id = (existingEmployee != null) ? existingEmployee.getId() : null;
        String createdAt = (existingEmployee != null) ? existingEmployee.getCreatedAt() : Instant.now().toString();
        String modifiedAt = (existingEmployee != null) ? existingEmployee.getLastModifiedAt() : Instant.now().toString();
        try{
            return new Employee(
                    id, // ID is generated by MongoDB
                    employeeDTO.getEmployeeId(),
                    employeeDTO.getFullName(),
                    employeeDTO.getEmail(),
                    employeeDTO.getDepartment(),
                    createdAt,
                    modifiedAt
            );
        } catch (Exception e) {
            logger.error("Error while mapping EmployeeDTO to Employee entity");
            throw new IllegalArgumentException("Failed to map EmployeeDTO to Employee", e);
        }
    }

    /**
     * Converts Employee entity to EmployeeDTO.
     */
    public static EmployeeDTO toDTO(Employee employee) {
        if (employee == null) {
            logger.error("Failed to convert: Employee entity is null.");
            throw new IllegalArgumentException("Employee entity cannot be null.");
        }

        try{
            return new EmployeeDTO(
                    employee.getEmployeeId(),
                    employee.getFullName(),
                    employee.getEmail(),
                    employee.getDepartment()
            );
        } catch (Exception e) {
            logger.error("Error while mapping Employee entity to EmployeeDTO: {}", e.getMessage());
            throw new IllegalArgumentException("Failed to map Employee entity to EmployeeDTO", e);
        }
    }



}
